{"ast":null,"code":"var _jsxFileName = \"/home/reddy/pacs/pacstorage/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [modalities, setModalities] = useState([]);\n  const [studiesPerDay, setStudiesPerDay] = useState(\"\");\n  const [mbSizePerStudy, setMbSizePerStudy] = useState(\"\");\n  const [storageNeeded, setStorageNeeded] = useState(null);\n\n  // Add modality\n  const addModality = () => {\n    const newModality = {\n      name: \"\",\n      studiesPerDay: \"\",\n      mbSizePerStudy: \"\"\n    };\n    setModalities([...modalities, newModality]);\n  };\n\n  // Update modality\n  const updateModality = (index, field, value) => {\n    const updatedModalities = [...modalities];\n    updatedModalities[index][field] = value;\n    setModalities(updatedModalities);\n  };\n\n  // Delete modality\n  const deleteModality = index => {\n    const updatedModalities = [...modalities];\n    updatedModalities.splice(index, 1);\n    setModalities(updatedModalities);\n  };\n\n  // Calculate storage needed\n  const calculateStorageNeeded = () => {\n    // Convert input values to numbers\n    const studiesPerDayNumber = parseFloat(studiesPerDay);\n    const mbSizePerStudyNumber = parseFloat(mbSizePerStudy);\n\n    // Check if conversion was successful and values are valid\n    if (!isNaN(studiesPerDayNumber) && !isNaN(mbSizePerStudyNumber)) {\n      const totalStudiesPerYear = studiesPerDayNumber * 5 * 365;\n      const totalGbNeeded = totalStudiesPerYear * mbSizePerStudyNumber;\n      setStorageNeeded(totalGbNeeded.toFixed(2)); // Display as a fixed number with 2 decimal places\n    } else {\n      // Handle invalid input values (e.g., non-numeric input)\n      alert(\"Please enter valid numeric values for Studies Per Day and MB Size Per Study.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PACS Storage Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Modalities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addModality,\n        children: \"Add Modality\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), modalities.map((modality, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Modality Name\",\n          value: modality.name,\n          onChange: e => updateModality(index, \"name\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Studies Per Day\",\n          value: modality.studiesPerDay,\n          onChange: e => updateModality(index, \"studiesPerDay\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"MB Size Per Study\",\n          value: modality.mbSizePerStudy,\n          onChange: e => updateModality(index, \"mbSizePerStudy\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteModality(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Storage Needed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Studies Per Day\",\n        value: studiesPerDay,\n        onChange: e => setStudiesPerDay(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"MB Size Per Study\",\n        value: mbSizePerStudy,\n        onChange: e => setMbSizePerStudy(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Storage Needed: \", storageNeeded !== null ? `${storageNeeded} GB` : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calculateStorageNeeded,\n        children: \"Calculate Storage Needed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GZcP8nQpKhTkr0NGQ81luBxst8c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","modalities","setModalities","studiesPerDay","setStudiesPerDay","mbSizePerStudy","setMbSizePerStudy","storageNeeded","setStorageNeeded","addModality","newModality","name","updateModality","index","field","value","updatedModalities","deleteModality","splice","calculateStorageNeeded","studiesPerDayNumber","parseFloat","mbSizePerStudyNumber","isNaN","totalStudiesPerYear","totalGbNeeded","toFixed","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","modality","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/reddy/pacs/pacstorage/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [modalities, setModalities] = useState([]);\n  const [studiesPerDay, setStudiesPerDay] = useState(\"\");\n  const [mbSizePerStudy, setMbSizePerStudy] = useState(\"\");\n  const [storageNeeded, setStorageNeeded] = useState(null);\n\n  // Add modality\n  const addModality = () => {\n    const newModality = {\n      name: \"\",\n      studiesPerDay: \"\",\n      mbSizePerStudy: \"\",\n    };\n    setModalities([...modalities, newModality]);\n  };\n\n  // Update modality\n  const updateModality = (index, field, value) => {\n    const updatedModalities = [...modalities];\n    updatedModalities[index][field] = value;\n    setModalities(updatedModalities);\n  };\n\n  // Delete modality\n  const deleteModality = (index) => {\n    const updatedModalities = [...modalities];\n    updatedModalities.splice(index, 1);\n    setModalities(updatedModalities);\n  };\n\n  // Calculate storage needed\n  const calculateStorageNeeded = () => {\n    // Convert input values to numbers\n    const studiesPerDayNumber = parseFloat(studiesPerDay);\n    const mbSizePerStudyNumber = parseFloat(mbSizePerStudy);\n\n    // Check if conversion was successful and values are valid\n    if (!isNaN(studiesPerDayNumber) && !isNaN(mbSizePerStudyNumber)) {\n      const totalStudiesPerYear = studiesPerDayNumber * 5 * 365;\n      const totalGbNeeded = totalStudiesPerYear * mbSizePerStudyNumber;\n      setStorageNeeded(totalGbNeeded.toFixed(2)); // Display as a fixed number with 2 decimal places\n    } else {\n      // Handle invalid input values (e.g., non-numeric input)\n      alert(\"Please enter valid numeric values for Studies Per Day and MB Size Per Study.\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>PACS Storage Calculator</h1>\n\n      <div>\n        <h2>Modalities</h2>\n        <button onClick={addModality}>Add Modality</button>\n        {modalities.map((modality, index) => (\n          <div key={index}>\n            <input\n              type=\"text\"\n              placeholder=\"Modality Name\"\n              value={modality.name}\n              onChange={(e) => updateModality(index, \"name\", e.target.value)}\n            />\n            <input\n              type=\"number\"\n              placeholder=\"Studies Per Day\"\n              value={modality.studiesPerDay}\n              onChange={(e) => updateModality(index, \"studiesPerDay\", e.target.value)}\n            />\n            <input\n              type=\"number\"\n              placeholder=\"MB Size Per Study\"\n              value={modality.mbSizePerStudy}\n              onChange={(e) => updateModality(index, \"mbSizePerStudy\", e.target.value)}\n            />\n            <button onClick={() => deleteModality(index)}>Delete</button>\n          </div>\n        ))}\n      </div>\n\n      <div>\n        <h2>Storage Needed</h2>\n        <input\n          type=\"number\"\n          placeholder=\"Studies Per Day\"\n          value={studiesPerDay}\n          onChange={(e) => setStudiesPerDay(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"MB Size Per Study\"\n          value={mbSizePerStudy}\n          onChange={(e) => setMbSizePerStudy(e.target.value)}\n        />\n        <p>Storage Needed: {storageNeeded !== null ? `${storageNeeded} GB` : \"\"}</p>\n        <button onClick={calculateStorageNeeded}>Calculate Storage Needed</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}